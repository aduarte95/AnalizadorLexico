/* The following code was generated by JFlex 1.7.0 */

/* Secci√≥n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexicoDoc.flex</tt>
 */
public class AnalizadorLexicoDoc {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\10\1\12\1\12\1\11\22\0\1\102\1\77\1\77\1\77"+
    "\1\77\1\77\1\77\1\77\1\77\1\77\1\77\1\77\1\77\1\77"+
    "\1\77\1\14\1\36\2\33\1\35\6\34\1\77\1\77\1\1\1\77"+
    "\1\13\1\77\1\77\1\37\1\54\1\3\1\47\1\31\1\63\1\56"+
    "\1\71\1\5\1\65\1\76\1\27\1\51\1\45\1\41\1\6\1\53"+
    "\1\4\1\2\1\7\1\43\1\73\1\76\1\67\1\25\1\76\1\77"+
    "\1\77\1\77\1\77\1\77\1\77\1\40\1\55\1\16\1\50\1\32"+
    "\1\64\1\57\1\72\1\20\1\66\1\24\1\30\1\52\1\46\1\42"+
    "\1\21\1\15\1\17\1\23\1\22\1\44\1\74\1\24\1\70\1\26"+
    "\1\24\1\0\1\77\1\0\1\77\6\0\1\12\33\0\1\101\10\0"+
    "\1\76\2\0\1\62\5\0\1\61\6\0\1\75\4\0\1\101\2\76"+
    "\1\100\1\60\23\76\1\0\12\76\1\100\1\60\23\76\1\0\70\76"+
    "\2\5\115\76\1\2\u0139\76\47\0\5\76\u1a1b\0\46\76\6\0\61\76"+
    "\5\0\4\76\5\0\15\76\1\0\106\76\101\0\u0100\76\u0128\0\1\12"+
    "\1\12\107\0\1\76\15\0\1\76\20\0\15\76\215\0\2\76\6\0"+
    "\1\76\33\0\1\76\21\0\51\76\u0ad7\0\40\76\u7aa2\0\146\76\3\0"+
    "\44\76\1\0\10\76\77\0\11\76\u0330\0\53\76\1\0\11\76\u4f9b\0"+
    "\7\76\u041a\0\32\76\6\0\32\76\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\265\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\5\2\2\3\1\1\2\3\1\2\1\3"+
    "\3\4\3\3\6\2\1\5\1\0\1\3\1\0\1\3"+
    "\3\0\1\2\1\3\1\6\13\2\1\6\1\3\1\6"+
    "\2\3\2\2\2\3\2\2\3\4\4\2\1\3\5\2"+
    "\1\3\1\2\1\3\6\2\2\0\2\3\3\0\2\3"+
    "\1\2\1\6\3\2\1\3\11\2\2\4\17\2\5\0"+
    "\6\2\1\3\3\2\1\0\11\2\10\0\7\2\1\0"+
    "\4\2\1\3\2\2\4\0\4\2\1\0\3\2\2\0"+
    "\1\3\3\2\1\0\2\2\1\0\2\3\3\2\4\0"+
    "\2\2\63\0\1\7\3\0\1\7\3\0\1\7";

  private static int [] zzUnpackAction() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u01d5"+
    "\0\u0218\0\u025b\0\u0218\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"+
    "\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9\0\u053c\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\103\0\u06ce\0\u0711\0\u0754\0\u0797"+
    "\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af"+
    "\0\u09f2\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7"+
    "\0\u103a\0\u107d\0\u10c0\0\u08a3\0\u1103\0\u1146\0\u1189\0\u11cc"+
    "\0\u120f\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u0d59"+
    "\0\u13e4\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u06ce\0\u1533\0\u1576"+
    "\0\u15b9\0\u15fc\0\u163f\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e"+
    "\0\u17d1\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6"+
    "\0\u19e9\0\u1a2c\0\u06ce\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b"+
    "\0\u1bbe\0\u1c01\0\u1c44\0\u1c87\0\u1cca\0\u1d0d\0\u1d50\0\u1d93"+
    "\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f\0\u1ee2\0\u1f25\0\u1f68\0\u1fab"+
    "\0\u1fee\0\u2031\0\u2074\0\u20b7\0\u20fa\0\u213d\0\u2180\0\u21c3"+
    "\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u2355\0\u2398\0\u23db"+
    "\0\u241e\0\u2461\0\u0d16\0\u24a4\0\u24e7\0\u252a\0\u256d\0\u25b0"+
    "\0\u15fc\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff\0\u2742\0\u2785"+
    "\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d"+
    "\0\u21c3\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f\0\u2b72"+
    "\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\u2d04\0\u2d47\0\u2d8a"+
    "\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c\0\u2f5f\0\u2fa2"+
    "\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u3028\0\u3177"+
    "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"+
    "\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564\0\u35a7"+
    "\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c\0\u37bf"+
    "\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994\0\u39d7"+
    "\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac\0\u3bef"+
    "\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4\0\u3e07"+
    "\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc\0\u3028"+
    "\0\u401f\0\u4062\0\u40a5\0\u0218\0\u40e8\0\u412b\0\u416e\0\u31ba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\2\1\14\1\6\1\5\2\6\1\7"+
    "\1\10\1\4\1\6\2\15\2\16\2\17\1\20\1\21"+
    "\1\22\1\20\2\23\2\24\2\25\2\26\2\27\2\30"+
    "\1\6\2\31\3\6\2\2\6\6\2\32\4\6\1\14"+
    "\1\33\1\2\1\34\1\35\1\36\6\35\3\0\70\35"+
    "\1\37\1\40\1\41\5\37\3\42\1\35\1\43\6\37"+
    "\1\41\57\37\1\35\1\36\3\44\1\45\2\44\3\0"+
    "\1\35\1\46\3\44\1\45\10\44\2\47\4\35\2\50"+
    "\2\51\16\44\2\35\14\44\1\46\1\52\3\35\1\36"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\2\44\2\53"+
    "\16\44\2\35\14\44\1\46\1\52\3\35\1\36\6\44"+
    "\3\0\1\35\1\46\16\44\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\36\6\44\3\0\1\35\1\46"+
    "\14\44\2\54\4\35\2\55\2\56\2\57\14\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\36\2\44\1\60\3\44"+
    "\3\0\1\35\1\46\2\44\1\60\13\44\4\35\2\61"+
    "\20\44\2\35\14\44\1\46\1\52\2\35\113\0\1\11"+
    "\72\0\1\35\1\36\6\62\3\0\1\35\1\63\16\62"+
    "\4\35\22\62\2\35\14\62\1\63\1\64\3\35\1\36"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\2\65\20\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\36\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\4\66\2\67\14\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\36\1\70\5\44\3\0"+
    "\1\35\1\46\6\44\1\70\3\44\2\71\2\44\4\35"+
    "\6\44\2\72\2\44\2\73\6\44\2\35\4\44\2\74"+
    "\6\44\1\46\1\52\3\35\1\36\6\35\3\0\20\35"+
    "\4\75\45\35\1\36\6\35\3\0\20\35\4\76\45\35"+
    "\1\36\6\35\3\0\20\35\3\76\1\77\45\35\1\36"+
    "\1\100\1\101\2\44\1\102\1\44\3\0\1\35\1\46"+
    "\1\103\1\101\2\44\1\102\1\44\1\100\3\44\2\104"+
    "\2\44\4\35\4\44\2\105\2\106\4\44\1\103\5\44"+
    "\2\35\2\107\12\44\1\46\1\52\3\35\1\36\1\110"+
    "\5\44\3\0\1\35\1\46\6\44\1\110\7\44\4\35"+
    "\22\44\2\35\14\44\1\46\1\52\3\35\1\36\1\111"+
    "\5\44\3\0\1\35\1\46\6\44\1\111\7\44\4\35"+
    "\6\44\2\112\12\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\36\3\44\1\104\2\44\3\0\1\35\1\46\3\44"+
    "\1\104\12\44\4\35\2\44\2\113\16\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\36\6\44\3\0\1\35\1\46"+
    "\14\44\2\114\4\35\2\115\2\44\2\116\14\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\36\6\44\3\0\1\35"+
    "\1\46\14\44\2\117\4\35\2\120\20\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\36\6\44\3\0\1\35\1\46"+
    "\16\44\4\35\2\121\20\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\36\6\44\3\0\1\35\1\46\16\44\4\35"+
    "\2\122\20\44\2\35\14\44\1\46\1\52\3\35\1\36"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\22\44\2\35"+
    "\14\44\1\46\1\52\1\63\2\35\1\123\6\35\3\0"+
    "\71\35\1\123\6\35\3\0\1\35\1\124\10\125\1\35"+
    "\1\125\1\35\1\125\1\35\1\125\5\35\1\125\1\35"+
    "\1\125\1\35\1\125\1\35\1\125\1\35\1\125\1\35"+
    "\1\125\2\35\1\125\1\35\1\125\4\35\1\125\1\35"+
    "\1\125\1\35\1\125\1\35\1\125\1\35\1\125\6\35"+
    "\10\37\3\42\1\126\77\37\3\42\1\126\1\37\10\40"+
    "\1\37\1\40\1\37\1\40\1\37\1\40\5\37\1\40"+
    "\1\37\1\40\1\37\1\40\1\37\1\40\1\37\1\40"+
    "\1\37\1\40\2\37\1\40\1\37\1\40\4\37\1\40"+
    "\1\37\1\40\1\37\1\40\1\37\1\40\1\37\1\40"+
    "\11\37\1\127\3\37\1\130\3\42\1\126\2\37\1\127"+
    "\3\37\1\130\60\37\13\42\1\11\67\42\10\131\3\42"+
    "\1\132\67\131\1\35\1\123\6\44\3\0\1\35\1\46"+
    "\16\44\4\35\22\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\16\44\4\35\6\44"+
    "\2\133\5\44\2\134\3\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\6\62\3\0\1\35\1\46\16\62\4\35"+
    "\22\62\2\35\14\62\1\46\1\135\3\35\1\123\6\44"+
    "\3\0\1\35\1\46\16\44\4\35\2\104\15\44\2\136"+
    "\1\44\2\35\14\44\1\46\1\52\3\35\1\123\6\44"+
    "\3\0\1\35\1\46\12\44\2\137\2\44\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\15\44\2\140\3\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\44\3\0\1\35"+
    "\1\46\16\44\4\35\22\44\2\35\14\44\1\46\1\52"+
    "\1\46\2\35\1\123\6\44\3\0\1\35\1\46\16\44"+
    "\4\35\6\44\2\141\2\44\2\142\6\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\2\44\1\142\3\44\3\0"+
    "\1\35\1\46\2\44\1\142\13\44\4\35\22\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\2\44\1\143\3\44"+
    "\3\0\1\35\1\46\2\44\1\143\13\44\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\2\44\1\65"+
    "\3\44\3\0\1\35\1\46\2\44\1\65\13\44\4\35"+
    "\22\44\2\35\14\44\1\46\1\52\3\35\1\123\6\44"+
    "\3\0\1\35\1\46\14\44\2\144\4\35\22\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\44\3\0\1\35"+
    "\1\46\16\44\4\35\2\120\20\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\6\44\3\0\1\35\1\46\12\44"+
    "\2\104\2\44\4\35\6\44\2\104\12\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\6\62\3\0\2\35\16\62"+
    "\4\35\22\62\2\35\14\62\1\35\1\62\3\35\1\123"+
    "\6\62\3\0\1\35\1\63\16\62\4\35\22\62\2\35"+
    "\14\62\1\63\1\64\3\35\1\123\6\62\3\0\2\35"+
    "\16\62\4\35\22\62\2\35\14\62\1\35\1\62\1\63"+
    "\2\35\1\123\6\44\3\0\1\35\1\46\1\103\15\44"+
    "\4\35\14\44\1\103\5\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\1\104\5\44\3\0\1\35\1\46\6\44"+
    "\1\104\7\44\4\35\22\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\6\44\3\0\1\35\1\46\14\44\2\145"+
    "\4\35\22\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\5\44\1\146\3\0\1\35\1\46\5\44\1\146\10\44"+
    "\4\35\10\44\2\147\10\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\6\44\3\0\1\35\1\46\12\44\2\150"+
    "\2\44\4\35\22\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\5\44\1\140\3\0\1\35\1\46\5\44\1\140"+
    "\10\44\4\35\22\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\4\44\1\151\1\44\3\0\1\35\1\46\4\44"+
    "\1\151\11\44\4\35\22\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\1\44\1\152\4\44\3\0\1\35\1\46"+
    "\1\44\1\152\14\44\4\35\22\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\6\35\3\0\20\35\4\76\45\35"+
    "\1\123\6\35\3\0\20\35\4\153\45\35\1\123\6\35"+
    "\3\0\20\35\3\153\1\154\45\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\21\44\1\155\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\6\44\3\0\1\35\1\46"+
    "\16\44\4\35\2\44\2\156\16\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\6\44\3\0\1\35\1\46\14\44"+
    "\2\157\4\35\22\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\16\44\4\35\4\44"+
    "\2\160\14\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\6\44\2\161"+
    "\12\44\2\35\14\44\1\46\1\52\3\35\1\123\5\44"+
    "\1\160\3\0\1\35\1\46\5\44\1\160\10\44\4\35"+
    "\22\44\2\35\14\44\1\46\1\52\3\35\1\123\3\44"+
    "\1\162\2\44\3\0\1\35\1\46\3\44\1\162\12\44"+
    "\4\35\22\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\6\44\3\0\1\35\1\46\14\44\2\150\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\5\44\1\163"+
    "\3\0\1\35\1\46\5\44\1\163\10\44\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\2\66\2\120\16\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\1\164\5\44\3\0"+
    "\1\35\1\46\6\44\1\164\7\44\4\35\2\44\2\165"+
    "\16\44\2\35\14\44\1\46\1\52\3\35\1\123\1\166"+
    "\5\44\3\0\1\35\1\46\6\44\1\166\3\44\2\104"+
    "\2\44\4\35\22\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\16\44\4\35\10\44"+
    "\2\167\10\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\2\44\1\170\3\44\3\0\1\35\1\46\2\44\1\170"+
    "\13\44\4\35\22\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\16\44\4\35\10\44"+
    "\2\171\10\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\22\44\2\35"+
    "\2\44\2\142\10\44\1\46\1\52\3\35\1\123\1\172"+
    "\1\173\4\44\3\0\1\35\1\46\1\44\1\173\4\44"+
    "\1\172\7\44\4\35\22\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\6\35\3\0\1\35\1\124\67\35\1\123"+
    "\1\174\5\35\3\0\10\35\1\174\60\35\1\123\6\35"+
    "\3\0\2\35\10\125\1\35\1\125\1\35\1\125\1\35"+
    "\1\125\5\35\1\125\1\35\1\125\1\35\1\125\1\35"+
    "\1\125\1\35\1\125\1\35\1\125\2\35\1\125\1\35"+
    "\1\125\4\35\1\125\1\35\1\125\1\35\1\125\1\35"+
    "\1\125\1\35\1\125\6\35\4\37\1\175\3\37\3\42"+
    "\1\126\3\37\1\175\73\37\3\42\1\126\11\37\2\176"+
    "\55\37\1\177\6\37\3\42\1\126\67\37\1\35\1\200"+
    "\6\35\3\0\71\35\1\123\6\44\3\0\1\35\1\46"+
    "\14\44\2\201\4\35\2\44\2\104\16\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\3\44\1\202\2\44\3\0"+
    "\1\35\1\46\3\44\1\202\12\44\4\35\22\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\62\3\0\2\35"+
    "\16\62\4\35\22\62\2\35\14\62\1\35\1\62\1\46"+
    "\2\35\1\123\6\44\3\0\1\35\1\46\16\44\4\35"+
    "\21\44\1\203\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\22\44\2\35"+
    "\10\44\2\142\2\44\1\46\1\52\3\35\1\123\2\44"+
    "\1\160\3\44\3\0\1\35\1\46\2\44\1\160\13\44"+
    "\4\35\22\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\5\44\1\204\3\0\1\35\1\46\1\103\4\44\1\204"+
    "\4\44\2\205\2\44\4\35\2\44\2\206\10\44\1\103"+
    "\5\44\2\35\14\44\1\46\1\52\3\35\1\123\6\44"+
    "\3\0\1\35\1\46\16\44\4\35\2\44\2\104\16\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\2\65\20\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\1\207\5\44\3\0\1\35"+
    "\1\46\6\44\1\207\7\44\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\6\44\3\0\1\35\1\46"+
    "\16\44\4\35\17\44\2\142\1\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\6\44\3\0\1\35\1\46\16\44"+
    "\4\35\2\44\2\210\16\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\6\44\3\0\1\35\1\46\14\44\2\211"+
    "\4\35\22\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\2\104\20\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\14\44\2\54\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\6\44\3\0\1\35\1\46"+
    "\14\44\2\212\4\35\22\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\6\35\3\0\23\35\1\153\45\35\1\123"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\22\44\1\35"+
    "\1\213\14\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\6\44\2\214\12\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\1\215\5\44\3\0"+
    "\1\35\1\46\6\44\1\215\7\44\4\35\22\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\44\3\0\1\35"+
    "\1\46\14\44\2\104\4\35\22\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\1\44\1\216\4\44\3\0\1\35"+
    "\1\46\1\103\1\216\14\44\4\35\14\44\1\103\5\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\6\44\2\217\12\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\44\3\0\1\35"+
    "\1\46\14\44\2\220\4\35\22\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\6\44\3\0\1\35\1\46\16\44"+
    "\4\35\2\44\2\221\16\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\6\44\3\0\1\35\1\46\16\44\4\35"+
    "\15\44\2\222\3\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\16\44\4\35\10\44"+
    "\2\160\10\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\2\44\2\223"+
    "\16\44\2\35\14\44\1\46\1\52\3\35\1\123\6\44"+
    "\3\0\1\35\1\46\16\44\4\35\2\224\20\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\3\44\1\170\2\44"+
    "\3\0\1\35\1\46\3\44\1\170\12\44\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\5\44\1\150"+
    "\3\0\1\35\1\46\5\44\1\150\10\44\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\3\44\1\150"+
    "\2\44\3\0\1\35\1\46\3\44\1\150\12\44\4\35"+
    "\22\44\2\35\14\44\1\46\1\52\3\35\1\123\5\35"+
    "\1\225\3\0\7\35\1\225\60\35\5\37\1\226\2\37"+
    "\3\42\1\126\4\37\1\226\72\37\3\42\1\126\13\37"+
    "\2\227\52\37\10\131\3\42\1\132\1\131\10\230\1\131"+
    "\1\230\1\131\1\230\1\131\1\230\5\131\1\230\1\131"+
    "\1\230\1\131\1\230\1\131\1\230\1\131\1\230\1\131"+
    "\1\230\2\131\1\230\1\131\1\230\4\131\1\230\1\131"+
    "\1\230\1\131\1\230\1\131\1\230\1\131\1\230\6\131"+
    "\1\231\1\232\6\231\3\0\1\132\1\233\10\234\1\231"+
    "\1\234\1\231\1\234\1\231\1\234\5\231\1\234\1\231"+
    "\1\234\1\231\1\234\1\231\1\234\1\231\1\234\1\231"+
    "\1\234\2\231\1\234\1\231\1\234\4\231\1\234\1\231"+
    "\1\234\1\231\1\234\1\231\1\234\1\231\1\234\6\231"+
    "\1\35\1\123\6\44\3\0\1\35\1\46\16\44\4\35"+
    "\12\44\2\235\6\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\14\44\2\236\4\35"+
    "\22\44\2\35\14\44\1\46\1\52\3\35\1\123\6\44"+
    "\3\0\1\35\1\46\16\44\4\35\22\44\2\35\12\44"+
    "\1\236\1\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\2\237\20\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\6\44\3\0\1\35\1\46"+
    "\16\44\4\35\2\240\20\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\6\44\3\0\1\35\1\46\16\44\4\35"+
    "\15\44\2\241\3\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\5\44\1\167\3\0\1\35\1\46\1\103\4\44"+
    "\1\167\10\44\4\35\14\44\1\103\5\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\6\44\3\0\1\35\1\46"+
    "\14\44\2\120\4\35\22\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\1\44\1\242\4\44\3\0\1\35\1\46"+
    "\1\44\1\242\14\44\4\35\22\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\4\44\1\243\1\44\3\0\1\35"+
    "\1\46\4\44\1\243\11\44\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\4\35\1\244\1\35\3\0"+
    "\6\35\1\244\62\35\1\123\6\44\3\0\1\35\1\46"+
    "\16\44\4\35\10\44\2\245\10\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\6\44\3\0\1\35\1\46\16\44"+
    "\4\35\2\246\20\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\16\44\4\35\4\44"+
    "\2\247\14\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\10\44\2\250"+
    "\10\44\2\35\14\44\1\46\1\52\3\35\1\123\6\44"+
    "\3\0\1\35\1\46\16\44\4\35\10\44\2\251\10\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\5\44\1\252"+
    "\3\0\1\35\1\46\5\44\1\252\10\44\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\1\253\5\44"+
    "\3\0\1\35\1\46\6\44\1\253\7\44\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\6\44\2\106\12\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\35\3\0\12\35"+
    "\2\254\54\35\6\37\1\255\1\37\3\42\1\126\5\37"+
    "\1\255\71\37\3\42\1\126\15\37\2\256\50\37\1\131"+
    "\1\230\6\131\3\42\1\132\1\131\10\230\1\131\1\230"+
    "\1\131\1\230\1\131\1\230\5\131\1\230\1\131\1\230"+
    "\1\131\1\230\1\131\1\230\1\131\1\230\1\131\1\230"+
    "\2\131\1\230\1\131\1\230\4\131\1\230\1\131\1\230"+
    "\1\131\1\230\1\131\1\230\1\131\1\230\6\131\1\35"+
    "\1\200\6\35\3\0\1\35\1\124\67\35\1\200\1\174"+
    "\5\35\3\0\10\35\1\174\57\35\1\231\1\257\6\231"+
    "\3\0\1\132\1\231\10\234\1\231\1\234\1\231\1\234"+
    "\1\231\1\234\5\231\1\234\1\231\1\234\1\231\1\234"+
    "\1\231\1\234\1\231\1\234\1\231\1\234\2\231\1\234"+
    "\1\231\1\234\4\231\1\234\1\231\1\234\1\231\1\234"+
    "\1\231\1\234\1\231\1\234\6\231\1\35\1\123\6\44"+
    "\3\0\1\35\1\46\16\44\4\35\15\44\2\260\3\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\6\44\2\104\12\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\44\3\0\1\35"+
    "\1\46\12\44\2\217\2\44\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\3\44\1\261\2\44\3\0"+
    "\1\35\1\46\3\44\1\261\12\44\4\35\22\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\44\3\0\1\35"+
    "\1\46\16\44\4\35\22\44\2\35\2\44\2\262\10\44"+
    "\1\46\1\52\3\35\1\123\3\44\1\263\2\44\3\0"+
    "\1\35\1\46\3\44\1\263\12\44\4\35\22\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\5\44\1\142\3\0"+
    "\1\35\1\46\5\44\1\142\10\44\4\35\22\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\35\3\0\30\35"+
    "\2\264\37\35\1\123\3\44\1\265\2\44\3\0\1\35"+
    "\1\46\3\44\1\265\12\44\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\2\44\1\217\3\44\3\0"+
    "\1\35\1\46\2\44\1\217\13\44\4\35\22\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\44\3\0\1\35"+
    "\1\46\16\44\4\35\2\266\20\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\6\44\3\0\1\35\1\46\14\44"+
    "\2\223\4\35\22\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\2\44\1\267\3\44\3\0\1\35\1\46\2\44"+
    "\1\267\13\44\4\35\22\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\5\44\1\170\3\0\1\35\1\46\5\44"+
    "\1\170\10\44\4\35\22\44\2\35\14\44\1\46\1\52"+
    "\3\35\1\123\6\35\3\0\14\35\2\270\52\35\7\37"+
    "\1\271\3\42\1\126\6\37\1\271\70\37\3\42\1\272"+
    "\67\37\1\231\1\257\6\231\3\0\1\132\1\233\10\234"+
    "\1\231\1\234\1\231\1\234\1\231\1\234\5\231\1\234"+
    "\1\231\1\234\1\231\1\234\1\231\1\234\1\231\1\234"+
    "\1\231\1\234\2\231\1\234\1\231\1\234\4\231\1\234"+
    "\1\231\1\234\1\231\1\234\1\231\1\234\1\231\1\234"+
    "\6\231\1\35\1\123\6\44\3\0\1\35\1\46\16\44"+
    "\4\35\2\273\20\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\16\44\4\35\6\44"+
    "\2\274\12\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\6\44\3\0\1\35\1\46\14\44\2\275\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\2\44\1\104"+
    "\3\44\3\0\1\35\1\46\2\44\1\104\13\44\4\35"+
    "\22\44\2\35\14\44\1\46\1\52\3\35\1\123\6\35"+
    "\3\0\16\35\2\276\51\35\1\123\1\44\1\277\4\44"+
    "\3\0\1\35\1\46\1\44\1\277\14\44\4\35\22\44"+
    "\2\35\14\44\1\46\1\52\3\35\1\123\6\44\3\0"+
    "\1\35\1\46\16\44\4\35\6\44\2\300\12\44\2\35"+
    "\14\44\1\46\1\52\3\35\1\123\6\44\3\0\1\35"+
    "\1\46\16\44\4\35\4\120\16\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\6\35\3\0\16\35\2\301\50\35"+
    "\10\271\3\42\1\302\67\271\1\272\1\123\6\272\3\303"+
    "\70\272\1\35\1\123\2\44\1\145\3\44\3\0\1\35"+
    "\1\46\2\44\1\145\13\44\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\5\44\1\304\3\0\1\35"+
    "\1\46\5\44\1\304\10\44\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\5\44\1\305\3\0\1\35"+
    "\1\46\5\44\1\305\10\44\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\1\126\5\35\3\0\10\35"+
    "\1\126\60\35\1\123\3\44\1\306\2\44\3\0\1\35"+
    "\1\46\3\44\1\306\12\44\4\35\22\44\2\35\14\44"+
    "\1\46\1\52\3\35\1\123\6\44\3\0\1\35\1\46"+
    "\16\44\4\35\10\44\2\142\10\44\2\35\14\44\1\46"+
    "\1\52\3\35\1\123\6\35\3\0\1\126\67\35\1\307"+
    "\1\310\6\307\3\311\1\307\1\312\66\307\1\303\1\0"+
    "\101\303\1\35\1\123\6\44\3\0\1\35\1\46\14\44"+
    "\2\313\4\35\22\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\16\44\4\35\2\44"+
    "\2\166\16\44\2\35\14\44\1\46\1\52\3\35\1\123"+
    "\6\44\3\0\1\35\1\46\16\44\4\35\21\44\1\314"+
    "\2\35\14\44\1\46\1\52\2\35\1\315\1\316\6\315"+
    "\3\0\1\307\1\317\66\315\1\311\1\320\12\311\1\321"+
    "\66\311\1\322\1\310\6\322\3\311\1\322\1\323\66\322"+
    "\1\35\1\123\6\44\3\0\1\35\1\46\16\44\4\35"+
    "\6\44\2\265\12\44\2\35\14\44\1\46\1\52\3\35"+
    "\1\123\6\44\3\0\1\35\1\46\16\44\4\35\22\44"+
    "\1\324\1\35\14\44\1\46\1\52\2\35\1\315\1\325"+
    "\6\315\3\0\1\307\67\315\1\307\1\310\6\307\3\311"+
    "\1\307\1\326\66\307\1\315\1\325\1\327\5\315\3\0"+
    "\1\307\7\315\1\327\57\315\1\0\1\311\12\0\1\330"+
    "\66\0\1\331\1\320\6\331\3\311\1\331\1\332\66\331"+
    "\1\307\1\333\6\307\3\311\1\307\1\312\66\307\1\322"+
    "\1\333\6\322\3\311\1\322\1\323\66\322\1\35\1\123"+
    "\6\35\3\0\32\35\2\334\34\35\1\315\1\325\6\315"+
    "\3\0\1\307\1\335\66\315\1\322\1\310\1\336\5\322"+
    "\3\311\1\322\1\323\6\322\1\336\57\322\1\315\1\325"+
    "\1\315\1\337\3\315\1\340\3\0\1\307\2\315\1\337"+
    "\3\315\1\340\60\315\2\0\1\341\20\0\1\341\57\0"+
    "\1\311\1\342\12\311\1\321\66\311\1\331\1\342\6\331"+
    "\3\311\1\331\1\332\66\331\1\307\1\333\6\307\3\311"+
    "\1\307\1\343\66\307\1\35\1\123\6\35\3\0\34\35"+
    "\2\344\32\35\1\315\1\325\1\345\5\315\3\0\1\307"+
    "\7\315\1\345\57\315\1\307\1\333\5\307\1\346\3\311"+
    "\1\307\1\312\5\307\1\346\60\307\1\315\1\325\2\315"+
    "\1\347\3\315\3\0\1\307\3\315\1\347\64\315\1\325"+
    "\6\315\3\0\1\307\11\315\2\350\54\315\3\0\1\351"+
    "\12\0\1\351\64\0\1\311\1\342\12\311\1\352\66\311"+
    "\1\322\1\310\1\353\5\322\3\311\1\322\1\323\6\322"+
    "\1\353\57\322\1\35\1\123\6\35\3\0\16\35\2\354"+
    "\50\35\1\315\1\325\5\315\1\340\3\0\1\307\6\315"+
    "\1\340\60\315\1\307\1\310\6\307\3\311\1\307\1\312"+
    "\10\307\2\355\54\307\1\315\1\325\3\315\1\356\2\315"+
    "\3\0\1\307\4\315\1\356\63\315\1\325\6\315\3\0"+
    "\1\307\13\315\2\357\52\315\4\0\1\360\12\0\1\360"+
    "\63\0\1\331\1\320\1\361\5\331\3\311\1\331\1\332"+
    "\6\331\1\361\57\331\1\307\1\333\1\307\1\362\3\307"+
    "\1\346\3\311\1\307\1\312\1\307\1\362\3\307\1\346"+
    "\60\307\1\35\1\123\6\35\3\0\2\35\1\363\35\35"+
    "\1\363\27\35\1\307\1\310\6\307\3\311\1\307\1\312"+
    "\12\307\2\364\52\307\1\315\1\325\4\315\1\365\1\315"+
    "\3\0\1\307\5\315\1\365\62\315\1\325\6\315\3\0"+
    "\1\307\15\315\2\366\50\315\5\0\1\367\12\0\1\367"+
    "\62\0\1\311\1\342\1\311\1\370\10\311\1\321\1\311"+
    "\1\370\64\311\1\307\1\310\2\307\1\371\3\307\3\311"+
    "\1\307\1\312\2\307\1\371\63\307\1\35\1\123\6\35"+
    "\3\0\30\35\2\372\36\35\1\307\1\310\6\307\3\311"+
    "\1\307\1\312\14\307\2\373\50\307\1\315\1\325\5\315"+
    "\1\374\3\0\1\307\6\315\1\374\61\315\1\325\6\315"+
    "\3\0\1\302\67\315\6\0\1\375\12\0\1\375\61\0"+
    "\1\311\1\320\2\311\1\376\7\311\1\321\2\311\1\376"+
    "\63\311\1\307\1\310\3\307\1\377\2\307\3\311\1\307"+
    "\1\312\3\307\1\377\62\307\1\35\1\123\6\35\3\0"+
    "\16\35\2\126\50\35\1\307\1\310\6\307\3\311\1\302"+
    "\1\312\66\307\1\315\1\325\6\315\3\0\1\u0100\67\315"+
    "\7\0\1\u0101\12\0\1\u0101\60\0\1\311\1\320\3\311"+
    "\1\u0102\6\311\1\321\3\311\1\u0102\62\311\1\307\1\310"+
    "\4\307\1\u0103\1\307\3\311\1\307\1\312\4\307\1\u0103"+
    "\61\307\13\0\1\u0104\67\0\1\311\1\320\4\311\1\u0105"+
    "\5\311\1\321\4\311\1\u0105\61\311\1\307\1\310\5\307"+
    "\1\u0106\3\311\1\307\1\312\5\307\1\u0106\60\307\1\311"+
    "\1\320\5\311\1\u0107\4\311\1\321\5\311\1\u0107\60\311"+
    "\1\307\1\310\6\307\3\311\1\u0100\1\312\66\307\1\311"+
    "\1\320\11\311\1\u0108\1\321\66\311";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16817];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\7\1\1\11\1\1\1\11\21\1\1\0\1\1"+
    "\1\0\1\1\3\0\57\1\2\0\2\1\3\0\42\1"+
    "\5\0\12\1\1\0\11\1\10\0\7\1\1\0\7\1"+
    "\4\0\4\1\1\0\3\1\2\0\4\1\1\0\2\1"+
    "\1\0\5\1\4\0\2\1\63\0\1\1\3\0\1\11"+
    "\3\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[264];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* C√≥digo personalizado */
 
 // Se agreg√≥ una propiedad para verificar si existen tokens pendientes
 private boolean _existenTokens = false;
 
 public boolean existenTokens(){
 return this._existenTokens;
 }
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoDoc(java.io.Reader in) {
   /* C√≥digo que se ejecutar√° en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 384) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* C√≥digo a ejecutar al finalizar el an√°lisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokenPersonalizado yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Sin Utilidad
            } 
            // fall through
          case 8: break;
          case 2: 
            { TokenPersonalizado t = new TokenPersonalizado(yytext().toLowerCase(), "Termino");
 this._existenTokens = true;
 return t;
            } 
            // fall through
          case 9: break;
          case 3: 
            { 
            } 
            // fall through
          case 10: break;
          case 4: 
            { TokenPersonalizado t = new TokenPersonalizado(yytext(), "Termino");
 this._existenTokens = true;
 return t;
            } 
            // fall through
          case 11: break;
          case 5: 
            { // Ignorar cuando se ingrese un espacio
            } 
            // fall through
          case 12: break;
          case 6: 
            { TokenPersonalizado t = new TokenPersonalizado(yytext().replace(".","").replace(",","").replace("/","")
                                                .replace("#","").replace("¬ø","").replace("?","")
                                                .replace("¬°","").replace("!","").replace("$","")
                                                .replace("%","").replace("^","").replace("&","")
                                                .replace("@","").replace("*","").replace(";","")
                                                .replace(":","").replace("<","").replace(">","")
                                                .replace("{","").replace("}","").replace("[","")
                                                .replace("]","").replace("-","").replace("=","")
                                                .replace("_","").replace("`","").replace("‚Äò","")
                                                .replace("~","").replace("(","").replace(")","")
                                                .replace("‚Ä?","").replace("‚Äú","").replace("\"","")
                                                .replace("‚Ä¶","").toLowerCase(), "Termino");
 this._existenTokens = true;
 return t;
            } 
            // fall through
          case 13: break;
          case 7: 
            { TokenPersonalizado t = new TokenPersonalizado(yytext()+"SCRIPT", "Termino");
     this._existenTokens = true;
     return t;
            } 
            // fall through
          case 14: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
