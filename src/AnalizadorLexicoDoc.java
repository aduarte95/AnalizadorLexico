/* The following code was generated by JFlex 1.7.0 */

/* Secci√≥n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnalizadorLexicoDoc.flex</tt>
 */
public class AnalizadorLexicoDoc {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\11\1\13\1\13\1\12\22\0\1\52\1\47\1\47\1\47"+
    "\1\47\1\47\1\47\1\47\1\47\1\47\1\47\1\47\1\47\1\47"+
    "\1\47\1\14\1\24\2\21\1\23\6\22\1\47\1\47\1\1\1\47"+
    "\1\10\1\47\1\47\1\25\1\34\1\3\1\31\1\17\1\41\1\35"+
    "\1\44\1\5\1\42\1\20\1\16\1\32\1\30\1\26\1\6\1\33"+
    "\1\4\1\2\1\7\1\27\1\45\1\20\1\43\1\15\1\20\1\47"+
    "\1\47\1\47\1\47\1\47\1\47\1\25\1\34\1\3\1\31\1\17"+
    "\1\41\1\35\1\44\1\5\1\42\1\20\1\16\1\32\1\30\1\26"+
    "\1\6\1\33\1\4\1\2\1\7\1\27\1\45\1\20\1\43\1\15"+
    "\1\20\1\0\1\47\1\0\1\47\6\0\1\13\33\0\1\51\10\0"+
    "\1\20\2\0\1\40\5\0\1\37\6\0\1\46\4\0\1\51\2\20"+
    "\1\50\1\36\23\20\1\0\12\20\1\50\1\36\23\20\1\0\70\20"+
    "\2\5\115\20\1\2\u0139\20\47\0\5\20\u1a1b\0\46\20\6\0\61\20"+
    "\5\0\4\20\5\0\15\20\1\0\106\20\101\0\u0100\20\u0128\0\1\13"+
    "\1\13\107\0\1\20\15\0\1\20\20\0\15\20\215\0\2\20\6\0"+
    "\1\20\33\0\1\20\21\0\51\20\u0ad7\0\40\20\u7aa2\0\146\20\3\0"+
    "\44\20\1\0\10\20\77\0\11\20\u0330\0\53\20\1\0\11\20\u4f9b\0"+
    "\7\20\u041a\0\32\20\6\0\32\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\265\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\5\2\2\3\1\1\2\3\1\2\1\3"+
    "\3\4\3\3\6\2\1\5\5\0\1\3\1\6\13\2"+
    "\2\6\2\3\2\2\2\3\2\2\2\4\3\2\1\3"+
    "\6\2\1\3\1\2\1\3\6\2\1\0\1\3\2\0"+
    "\1\3\1\2\1\6\3\2\1\3\11\2\2\4\17\2"+
    "\3\0\6\2\1\3\3\2\1\0\11\2\4\0\7\2"+
    "\1\0\4\2\1\3\2\2\4\0\4\2\1\0\3\2"+
    "\2\0\1\3\3\2\1\0\2\2\2\0\1\3\5\2"+
    "\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\201\0\254\0\327\0\u0102\0\u012d"+
    "\0\u0158\0\u0183\0\u0158\0\u01ae\0\u01d9\0\u0204\0\u022f\0\u025a"+
    "\0\u0285\0\u02b0\0\u02db\0\u0306\0\u0331\0\u035c\0\u0387\0\u03b2"+
    "\0\u03dd\0\u0408\0\u0433\0\53\0\53\0\u045e\0\u0489\0\u04b4"+
    "\0\u04df\0\u050a\0\u0535\0\u0560\0\u058b\0\u05b6\0\u05e1\0\u060c"+
    "\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3\0\u070e\0\u0739\0\u0764"+
    "\0\u078f\0\u07ba\0\u07e5\0\u0810\0\u083b\0\u0866\0\u0891\0\u08bc"+
    "\0\u08e7\0\u0912\0\u093d\0\u0968\0\u0993\0\327\0\u09be\0\u09e9"+
    "\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41"+
    "\0\u0b6c\0\u0b97\0\u07ba\0\u0bc2\0\u0bed\0\u0c18\0\53\0\u0c43"+
    "\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b"+
    "\0\u0dc6\0\u01d9\0\u0df1\0\u0e1c\0\u0e47\0\u0e72\0\u0e9d\0\u0ec8"+
    "\0\u0ef3\0\53\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f\0\u0fca\0\u0ff5"+
    "\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7\0\u1122\0\u114d"+
    "\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f\0\u127a\0\u12a5"+
    "\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7\0\u13d2\0\u13fd"+
    "\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff\0\u152a\0\u078f"+
    "\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657\0\u1682"+
    "\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1759\0\u1784\0\u17af\0\u17da"+
    "\0\u1805\0\u137c\0\u1830\0\u185b\0\u1886\0\u18b1\0\u18dc\0\u1907"+
    "\0\u1932\0\u195d\0\u1988\0\u19b3\0\u19de\0\u1a09\0\u1a34\0\u1a5f"+
    "\0\u1a8a\0\u1ab5\0\u1ae0\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7"+
    "\0\u1be2\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4\0\u1d0f"+
    "\0\u1d3a\0\u1d65\0\u1d90\0\u1dbb\0\u1de6\0\u1e11\0\u1e3c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\6\1\7\1\10\1\2"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\6"+
    "\1\20\1\21\1\22\1\20\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\6\1\31\2\6\2\2\3\6\1\32"+
    "\2\6\1\14\1\33\1\2\1\34\1\35\1\36\7\35"+
    "\3\0\37\35\2\37\1\40\5\37\1\35\3\41\37\37"+
    "\1\35\1\36\3\6\1\42\2\6\1\35\3\0\1\43"+
    "\2\6\1\44\1\6\4\35\1\45\1\46\10\6\2\35"+
    "\6\6\1\43\1\47\3\35\1\36\6\6\1\35\3\0"+
    "\1\43\4\6\4\35\1\6\1\50\10\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\12\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\6\6\1\35\3\0\1\43\2\6\1\51\1\6"+
    "\4\35\1\52\1\53\1\54\7\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\2\6\1\55\3\6\1\35\3\0"+
    "\1\43\4\6\4\35\1\56\11\6\2\35\6\6\1\43"+
    "\1\47\2\35\64\0\1\11\41\0\1\35\1\36\6\57"+
    "\1\35\3\0\1\14\4\57\4\35\12\57\2\35\6\57"+
    "\1\14\1\60\3\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\1\61\11\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\2\62\1\63\7\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\1\64\5\6\1\35\3\0\1\43\1\6\1\65"+
    "\2\6\4\35\3\6\1\66\1\6\1\67\4\6\2\35"+
    "\2\6\1\70\3\6\1\43\1\47\3\35\1\36\7\35"+
    "\3\0\5\35\4\21\27\35\1\36\7\35\3\0\5\35"+
    "\4\71\27\35\1\36\7\35\3\0\5\35\3\71\1\72"+
    "\27\35\1\36\1\73\1\74\2\6\1\75\1\6\1\35"+
    "\3\0\1\43\1\6\1\76\2\6\4\35\2\6\1\77"+
    "\1\100\2\6\1\101\3\6\2\35\1\102\5\6\1\43"+
    "\1\47\3\35\1\36\1\103\5\6\1\35\3\0\1\43"+
    "\4\6\4\35\12\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\1\104\5\6\1\35\3\0\1\43\4\6\4\35"+
    "\3\6\1\105\6\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\3\6\1\76\2\6\1\35\3\0\1\43\4\6"+
    "\4\35\1\6\1\106\10\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\2\6\1\107"+
    "\1\6\4\35\1\110\1\6\1\111\7\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\6\6\1\35\3\0\1\43"+
    "\2\6\1\112\1\6\4\35\1\113\11\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\1\114\11\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\1\115\11\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\6\6\1\35\3\0\1\43\4\6\4\35\12\6\2\35"+
    "\6\6\1\43\1\47\1\14\2\35\1\36\7\35\3\0"+
    "\1\116\36\35\10\37\1\117\3\41\42\37\1\120\3\37"+
    "\1\121\1\117\3\41\37\37\10\41\1\11\42\41\1\35"+
    "\1\36\6\6\1\35\3\0\1\43\4\6\4\35\3\6"+
    "\1\122\3\6\1\123\2\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\57\1\35\3\0\1\43\4\57\4\35"+
    "\12\57\2\35\6\57\1\43\1\124\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\4\6\4\35\1\76\7\6\1\125"+
    "\1\6\2\35\6\6\1\43\1\47\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\1\6\1\126\2\6\4\35\12\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\6\6\1\35"+
    "\3\0\1\43\4\6\4\35\7\6\1\127\2\6\2\35"+
    "\6\6\1\43\1\47\3\35\1\36\6\6\1\35\3\0"+
    "\1\43\4\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\1\43\2\35\1\36\6\6\1\35\3\0\1\43\4\6"+
    "\4\35\3\6\1\130\1\6\1\131\4\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\2\6\1\131\3\6\1\35"+
    "\3\0\1\43\4\6\4\35\12\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\2\6\1\132\3\6\1\35\3\0"+
    "\1\43\4\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\2\6\1\61\3\6\1\35\3\0\1\43"+
    "\4\6\4\35\12\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\6\6\1\35\3\0\1\43\2\6\1\133\1\6"+
    "\4\35\12\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\6\6\1\35\3\0\1\43\4\6\4\35\1\113\11\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\6\6\1\35"+
    "\3\0\1\43\1\6\1\76\2\6\4\35\3\6\1\76"+
    "\6\6\2\35\6\6\1\43\1\47\3\35\1\36\6\57"+
    "\1\35\3\0\1\35\4\57\4\35\12\57\2\35\6\57"+
    "\1\35\1\57\3\35\1\36\6\57\1\35\3\0\1\35"+
    "\4\57\4\35\12\57\2\35\6\57\1\35\1\57\1\14"+
    "\2\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\6\6\1\101\3\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\1\76\5\6\1\35\3\0\1\43\4\6\4\35"+
    "\12\6\2\35\6\6\1\43\1\47\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\2\6\1\134\1\6\4\35\12\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\5\6\1\135"+
    "\1\35\3\0\1\43\4\6\4\35\4\6\1\136\5\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\6\6\1\35"+
    "\3\0\1\43\1\6\1\137\2\6\4\35\12\6\2\35"+
    "\6\6\1\43\1\47\3\35\1\36\5\6\1\127\1\35"+
    "\3\0\1\43\4\6\4\35\12\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\4\6\1\140\1\6\1\35\3\0"+
    "\1\43\4\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\1\6\1\141\4\6\1\35\3\0\1\43"+
    "\4\6\4\35\12\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\7\35\3\0\5\35\4\142\27\35\1\36\7\35"+
    "\3\0\5\35\3\142\1\143\27\35\1\36\6\6\1\35"+
    "\3\0\1\43\4\6\4\35\11\6\1\144\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\1\6\1\145\10\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\6\6\1\35\3\0\1\43\2\6"+
    "\1\146\1\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\3\6\1\147\6\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\5\6\1\150\1\35\3\0\1\43\4\6\4\35"+
    "\12\6\2\35\6\6\1\43\1\47\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\4\6\4\35\2\6\1\150\7\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\3\6\1\151"+
    "\2\6\1\35\3\0\1\43\4\6\4\35\12\6\2\35"+
    "\6\6\1\43\1\47\3\35\1\36\6\6\1\35\3\0"+
    "\1\43\2\6\1\137\1\6\4\35\12\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\5\6\1\152\1\35\3\0"+
    "\1\43\4\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\1\62\1\113\10\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\1\153\5\6\1\35\3\0\1\43\4\6\4\35"+
    "\1\6\1\154\10\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\1\155\5\6\1\35\3\0\1\43\1\6\1\76"+
    "\2\6\4\35\12\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\6\6\1\35\3\0\1\43\4\6\4\35\4\6"+
    "\1\156\5\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\2\6\1\157\3\6\1\35\3\0\1\43\4\6\4\35"+
    "\12\6\2\35\6\6\1\43\1\47\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\4\6\4\35\4\6\1\160\5\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\6\6\1\35"+
    "\3\0\1\43\4\6\4\35\12\6\2\35\1\6\1\131"+
    "\4\6\1\43\1\47\3\35\1\36\1\161\1\162\4\6"+
    "\1\35\3\0\1\43\4\6\4\35\12\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\1\163\6\35\3\0\37\35"+
    "\4\37\1\164\3\37\1\117\3\41\47\37\1\117\3\41"+
    "\1\37\1\165\35\37\1\35\1\36\6\6\1\35\3\0"+
    "\1\43\2\6\1\166\1\6\4\35\1\6\1\76\10\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\3\6\1\167"+
    "\2\6\1\35\3\0\1\43\4\6\4\35\12\6\2\35"+
    "\6\6\1\43\1\47\3\35\1\36\6\57\1\35\3\0"+
    "\1\35\4\57\4\35\12\57\2\35\6\57\1\35\1\57"+
    "\1\43\2\35\1\36\6\6\1\35\3\0\1\43\4\6"+
    "\4\35\11\6\1\170\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\6\6\1\35\3\0\1\43\4\6\4\35\12\6"+
    "\2\35\4\6\1\131\1\6\1\43\1\47\3\35\1\36"+
    "\2\6\1\150\3\6\1\35\3\0\1\43\4\6\4\35"+
    "\12\6\2\35\6\6\1\43\1\47\3\35\1\36\5\6"+
    "\1\171\1\35\3\0\1\43\1\6\1\172\2\6\4\35"+
    "\1\6\1\173\4\6\1\101\3\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\6\6\1\35\3\0\1\43\4\6"+
    "\4\35\1\6\1\76\10\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\1\174\5\6\1\35\3\0\1\43\4\6"+
    "\4\35\12\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\6\6\1\35\3\0\1\43\4\6\4\35\10\6\1\131"+
    "\1\6\2\35\6\6\1\43\1\47\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\4\6\4\35\1\6\1\175\10\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\6\6\1\35"+
    "\3\0\1\43\2\6\1\176\1\6\4\35\12\6\2\35"+
    "\6\6\1\43\1\47\3\35\1\36\6\6\1\35\3\0"+
    "\1\43\4\6\4\35\1\76\11\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\6\6\1\35\3\0\1\43\2\6"+
    "\1\51\1\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\2\6\1\177"+
    "\1\6\4\35\12\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\7\35\3\0\10\35\1\142\27\35\1\36\6\6"+
    "\1\35\3\0\1\43\4\6\4\35\12\6\1\35\1\200"+
    "\6\6\1\43\1\47\3\35\1\36\6\6\1\35\3\0"+
    "\1\43\4\6\4\35\3\6\1\201\6\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\1\202\5\6\1\35\3\0"+
    "\1\43\4\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\1\6\1\203\4\6\1\35\3\0\1\43"+
    "\4\6\4\35\6\6\1\101\3\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\6\6\1\35\3\0\1\43\2\6"+
    "\1\76\1\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\3\6\1\204\6\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\6\6\1\35\3\0\1\43\2\6\1\205\1\6"+
    "\4\35\12\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\6\6\1\35\3\0\1\43\4\6\4\35\1\6\1\206"+
    "\10\6\2\35\6\6\1\43\1\47\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\4\6\4\35\7\6\1\207\2\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\6\6\1\35"+
    "\3\0\1\43\4\6\4\35\4\6\1\150\5\6\2\35"+
    "\6\6\1\43\1\47\3\35\1\36\6\6\1\35\3\0"+
    "\1\43\4\6\4\35\1\6\1\210\10\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\1\211\11\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\3\6\1\157\2\6\1\35\3\0\1\43"+
    "\4\6\4\35\12\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\5\6\1\137\1\35\3\0\1\43\4\6\4\35"+
    "\12\6\2\35\6\6\1\43\1\47\3\35\1\36\3\6"+
    "\1\137\2\6\1\35\3\0\1\43\4\6\4\35\12\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\1\35\1\212"+
    "\3\35\1\213\1\35\3\0\37\35\5\37\1\214\2\37"+
    "\1\117\3\41\47\37\1\117\3\41\2\37\1\215\34\37"+
    "\1\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\5\6\1\216\4\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\6\6\1\35\3\0\1\43\2\6\1\217\1\6"+
    "\4\35\12\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\6\6\1\35\3\0\1\43\4\6\4\35\12\6\2\35"+
    "\5\6\1\217\1\43\1\47\3\35\1\36\6\6\1\35"+
    "\3\0\1\43\4\6\4\35\1\220\11\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\1\221\11\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\7\6\1\222\2\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\5\6\1\156\1\35\3\0\1\43\4\6\4\35"+
    "\6\6\1\101\3\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\6\6\1\35\3\0\1\43\2\6\1\113\1\6"+
    "\4\35\12\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\1\6\1\223\4\6\1\35\3\0\1\43\4\6\4\35"+
    "\12\6\2\35\6\6\1\43\1\47\3\35\1\36\4\6"+
    "\1\224\1\6\1\35\3\0\1\43\4\6\4\35\12\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\4\35\1\225"+
    "\2\35\3\0\40\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\4\6\1\226\5\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\6\6\1\35\3\0\1\43\4\6"+
    "\4\35\1\227\11\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\6\6\1\35\3\0\1\43\4\6\4\35\2\6"+
    "\1\230\7\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\6\6\1\35\3\0\1\43\4\6\4\35\4\6\1\231"+
    "\5\6\2\35\6\6\1\43\1\47\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\4\6\4\35\4\6\1\232\5\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\5\6\1\233"+
    "\1\35\3\0\1\43\4\6\4\35\12\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\1\234\5\6\1\35\3\0"+
    "\1\43\4\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\3\6\1\100\6\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\2\35\1\235\4\35\3\0\40\35\1\36\7\35"+
    "\3\0\1\35\1\236\35\35\6\37\1\237\1\37\1\117"+
    "\3\41\47\37\1\117\3\41\3\37\1\240\33\37\1\35"+
    "\1\36\6\6\1\35\3\0\1\43\4\6\4\35\7\6"+
    "\1\241\2\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\6\6\1\35\3\0\1\43\4\6\4\35\3\6\1\76"+
    "\6\6\2\35\6\6\1\43\1\47\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\1\6\1\204\2\6\4\35\12\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\3\6\1\242"+
    "\2\6\1\35\3\0\1\43\4\6\4\35\12\6\2\35"+
    "\6\6\1\43\1\47\3\35\1\36\6\6\1\35\3\0"+
    "\1\43\4\6\4\35\12\6\2\35\1\6\1\243\4\6"+
    "\1\43\1\47\3\35\1\36\3\6\1\244\2\6\1\35"+
    "\3\0\1\43\4\6\4\35\12\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\5\6\1\131\1\35\3\0\1\43"+
    "\4\6\4\35\12\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\7\35\3\0\13\35\1\245\24\35\1\36\3\6"+
    "\1\246\2\6\1\35\3\0\1\43\4\6\4\35\12\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\2\6\1\204"+
    "\3\6\1\35\3\0\1\43\4\6\4\35\12\6\2\35"+
    "\6\6\1\43\1\47\3\35\1\36\6\6\1\35\3\0"+
    "\1\43\4\6\4\35\1\247\11\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\6\6\1\35\3\0\1\43\2\6"+
    "\1\210\1\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\2\6\1\250\3\6\1\35\3\0\1\43"+
    "\4\6\4\35\12\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\5\6\1\157\1\35\3\0\1\43\4\6\4\35"+
    "\12\6\2\35\6\6\1\43\1\47\3\35\1\36\3\35"+
    "\1\251\3\35\3\0\40\35\1\36\7\35\3\0\2\35"+
    "\1\252\34\35\7\37\1\240\1\117\3\41\47\37\1\253"+
    "\3\41\37\37\1\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\1\254\11\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\3\6\1\255\6\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\6\6\1\35\3\0\1\43\2\6\1\256\1\6"+
    "\4\35\12\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\2\6\1\76\3\6\1\35\3\0\1\43\4\6\4\35"+
    "\12\6\2\35\6\6\1\43\1\47\3\35\1\36\7\35"+
    "\3\0\3\35\1\257\34\35\1\36\1\6\1\260\4\6"+
    "\1\35\3\0\1\43\4\6\4\35\12\6\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\3\6\1\261\6\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\6\6\1\35\3\0\1\43\4\6"+
    "\4\35\2\113\10\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\4\35\1\262\2\35\3\0\40\35\1\36\7\35"+
    "\3\0\3\35\1\263\33\35\1\253\1\36\7\253\3\264"+
    "\37\253\1\35\1\36\2\6\1\134\3\6\1\35\3\0"+
    "\1\43\4\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\5\6\1\265\1\35\3\0\1\43\4\6"+
    "\4\35\12\6\2\35\6\6\1\43\1\47\3\35\1\36"+
    "\5\6\1\266\1\35\3\0\1\43\4\6\4\35\12\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\1\117\6\35"+
    "\3\0\40\35\1\36\3\6\1\267\2\6\1\35\3\0"+
    "\1\43\4\6\4\35\12\6\2\35\6\6\1\43\1\47"+
    "\3\35\1\36\6\6\1\35\3\0\1\43\4\6\4\35"+
    "\4\6\1\131\5\6\2\35\6\6\1\43\1\47\3\35"+
    "\1\36\5\35\1\263\1\35\3\0\40\35\1\36\6\35"+
    "\1\117\3\0\37\35\1\264\1\0\51\264\1\35\1\36"+
    "\6\6\1\35\3\0\1\43\2\6\1\270\1\6\4\35"+
    "\12\6\2\35\6\6\1\43\1\47\3\35\1\36\6\6"+
    "\1\35\3\0\1\43\4\6\4\35\1\6\1\155\10\6"+
    "\2\35\6\6\1\43\1\47\3\35\1\36\6\6\1\35"+
    "\3\0\1\43\4\6\4\35\11\6\1\271\2\35\6\6"+
    "\1\43\1\47\3\35\1\36\6\6\1\35\3\0\1\43"+
    "\4\6\4\35\3\6\1\246\6\6\2\35\6\6\1\43"+
    "\1\47\3\35\1\36\6\6\1\35\3\0\1\43\4\6"+
    "\4\35\12\6\1\272\1\35\6\6\1\43\1\47\3\35"+
    "\1\36\7\35\3\0\14\35\1\273\23\35\1\36\7\35"+
    "\3\0\15\35\1\274\22\35\1\36\7\35\3\0\3\35"+
    "\1\275\34\35\1\36\7\35\3\0\17\35\1\276\20\35"+
    "\1\36\7\35\3\0\13\35\1\277\24\35\1\36\7\35"+
    "\3\0\3\35\1\117\33\35";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7783];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\7\1\1\11\1\1\1\11\21\1\5\0\54\1"+
    "\1\0\1\1\2\0\41\1\3\0\12\1\1\0\11\1"+
    "\4\0\7\1\1\0\7\1\4\0\4\1\1\0\3\1"+
    "\2\0\4\1\1\0\2\1\2\0\6\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[191];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
 
 /* C√≥digo personalizado */
 
 // Se agreg√≥ una propiedad para verificar si existen tokens pendientes
 private boolean _existenTokens = false;
 
 public boolean existenTokens(){
 return this._existenTokens;
 }
 


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public AnalizadorLexicoDoc(java.io.Reader in) {
   /* C√≥digo que se ejecutar√° en el constructor de la clase */
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 384) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
     
 /* C√≥digo a ejecutar al finalizar el an√°lisis, en este caso cambiaremos el valor de una variable bandera */
 this._existenTokens = false;
 

    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public TokenPersonalizado yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { //Sin Utilidad
            } 
            // fall through
          case 7: break;
          case 2: 
            { TokenPersonalizado t = new TokenPersonalizado(yytext().toLowerCase(), "Termino");
 this._existenTokens = true;
 return t;
            } 
            // fall through
          case 8: break;
          case 3: 
            { 
            } 
            // fall through
          case 9: break;
          case 4: 
            { TokenPersonalizado t = new TokenPersonalizado(yytext(), "Termino");
 this._existenTokens = true;
 return t;
            } 
            // fall through
          case 10: break;
          case 5: 
            { // Ignorar cuando se ingrese un espacio
            } 
            // fall through
          case 11: break;
          case 6: 
            { TokenPersonalizado t = new TokenPersonalizado(yytext().replace(".","").replace(",","").replace("/","")
                                                .replace("#","").replace("¬ø","").replace("?","")
                                                .replace("¬°","").replace("!","").replace("$","")
                                                .replace("%","").replace("^","").replace("&","")
                                                .replace("@","").replace("*","").replace(";","")
                                                .replace(":","").replace("<","").replace(">","")
                                                .replace("{","").replace("}","").replace("[","")
                                                .replace("]","").replace("-","").replace("=","")
                                                .replace("_","").replace("`","").replace("‚Äò","")
                                                .replace("~","").replace("(","").replace(")","")
                                                .replace("‚Ä?","").replace("‚Äú","").replace("\"","")
                                                .replace("‚Ä¶","").toLowerCase(), "Termino");
 this._existenTokens = true;
 return t;
            } 
            // fall through
          case 12: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
